//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MVCTreeSP.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Database2Entities : DbContext
    {
        public Database2Entities()
            : base("name=Database2Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Node> Nodes { get; set; }
    
        public virtual ObjectResult<GetActiveNodes_Result> GetActiveNodes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetActiveNodes_Result>("GetActiveNodes");
        }
    
        public virtual int sp_InsertTree(string nodeName, Nullable<int> parentNodeId, Nullable<System.DateTime> startDate)
        {
            var nodeNameParameter = nodeName != null ?
                new ObjectParameter("NodeName", nodeName) :
                new ObjectParameter("NodeName", typeof(string));
    
            var parentNodeIdParameter = parentNodeId.HasValue ?
                new ObjectParameter("ParentNodeId", parentNodeId) :
                new ObjectParameter("ParentNodeId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertTree", nodeNameParameter, parentNodeIdParameter, startDateParameter);
        }
    
        public virtual ObjectResult<sp_ShowTree_Result> sp_ShowTree(Nullable<int> nodeId)
        {
            var nodeIdParameter = nodeId.HasValue ?
                new ObjectParameter("NodeId", nodeId) :
                new ObjectParameter("NodeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ShowTree_Result>("sp_ShowTree", nodeIdParameter);
        }
    
        public virtual int sp_UpdateTree(Nullable<int> nodeId, string nodeName, Nullable<int> parentNodeId, Nullable<System.DateTime> startDate)
        {
            var nodeIdParameter = nodeId.HasValue ?
                new ObjectParameter("NodeId", nodeId) :
                new ObjectParameter("NodeId", typeof(int));
    
            var nodeNameParameter = nodeName != null ?
                new ObjectParameter("NodeName", nodeName) :
                new ObjectParameter("NodeName", typeof(string));
    
            var parentNodeIdParameter = parentNodeId.HasValue ?
                new ObjectParameter("ParentNodeId", parentNodeId) :
                new ObjectParameter("ParentNodeId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateTree", nodeIdParameter, nodeNameParameter, parentNodeIdParameter, startDateParameter);
        }
    }
}
